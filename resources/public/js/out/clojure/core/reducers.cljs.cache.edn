;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{reduce take map mapcat cat take-while remove drop flatten filter}, :name clojure.core.reducers, :imports nil, :requires {cljs.core cljs.core, core cljs.core}, :uses nil, :defs {reduce {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f init coll]), :arglists ([f coll] [f init coll]), :arglists-meta (nil nil)}, :arglists (quote ([f coll] [f init coll])), :doc "Like core/reduce except:\n     When init is not provided, (f) is used.\n     Maps are reduced with reduce-kv", :end-column 13, :end-line 33, :column 7, :line 33, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/reduce, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f init coll]), :arglists ([f coll] [f init coll]), :arglists-meta (nil nil)}, :method-params ([f coll] [f init coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 3, :fn-var true, :arglists ([f coll] [f init coll]), :doc "Like core/reduce except:\n     When init is not provided, (f) is used.\n     Maps are reduced with reduce-kv", :test true}, take {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}, :arglists (quote ([n] [n coll])), :doc "Ends the reduction of coll after consuming n values.", :end-column 17, :end-line 164, :column 13, :line 164, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/take, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}, :method-params ([n] [n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists ([n] [n coll]), :doc "Ends the reduction of coll after consuming n values.", :test true}, map {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :arglists (quote ([f] [f coll])), :doc "Applies f to every value in the reduction of coll. Foldable.", :end-column 16, :end-line 96, :column 13, :line 96, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/map, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :method-params ([f] [f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f coll]), :doc "Applies f to every value in the reduction of coll. Foldable.", :test true}, foldcat {:protocol-inline nil, :meta {:arglists (quote ([coll])), :doc "Equivalent to (fold cat append! coll)", :end-column 14, :end-line 237, :column 7, :line 237, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/foldcat, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Equivalent to (fold cat append! coll)", :test true}, reducer {:protocol-inline nil, :meta {:arglists (quote ([coll xf])), :doc "Given a reducible collection, and a transformation function xf,\n  returns a reducible collection, where any supplied reducing\n  fn will be transformed by xf. xf is a function of reducing fn to\n  reducing fn.", :end-column 14, :end-line 66, :column 7, :line 66, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/reducer, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 14, :method-params ([coll xf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll xf])), :doc "Given a reducible collection, and a transformation function xf,\n  returns a reducible collection, where any supplied reducing\n  fn will be transformed by xf. xf is a function of reducing fn to\n  reducing fn.", :test true}, mapcat {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :arglists (quote ([f] [f coll])), :doc "Applies f to every value in the reduction of coll, concatenating the result\n  colls of (f val). Foldable.", :end-column 19, :end-line 106, :column 13, :line 106, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/mapcat, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :method-params ([f] [f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f coll]), :doc "Applies f to every value in the reduction of coll, concatenating the result\n  colls of (f val). Foldable.", :test true}, t6996 {:num-fields 4, :protocols #{clojure.core.reducers/CollFold cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.reducers/t6996, :file "resources/public/js/out/clojure/core/reducers.cljs", :type true, :anonymous true, :column 6, :line 85, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}}, cat {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [ctor] [left right]), :arglists ([] [ctor] [left right]), :arglists-meta (nil nil nil)}, :arglists (quote ([] [ctor] [left right])), :doc "A high-performance combining fn that yields the catenation of the\n  reduced values. The result is reducible, foldable, seqable and\n  counted, providing the identity collections are reducible, seqable\n  and counted. The single argument version will build a combining fn\n  with the supplied identity constructor. Tests for identity\n  with (zero? (count x)). See also foldcat.", :end-column 10, :end-line 213, :column 7, :line 213, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/cat, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [ctor] [left right]), :arglists ([] [ctor] [left right]), :arglists-meta (nil nil nil)}, :method-params ([] [ctor] [left right]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists ([] [ctor] [left right]), :doc "A high-performance combining fn that yields the catenation of the\n  reduced values. The result is reducible, foldable, seqable and\n  counted, providing the identity collections are reducible, seqable\n  and counted. The single argument version will build a combining fn\n  with the supplied identity constructor. Tests for identity\n  with (zero? (count x)). See also foldcat.", :test true}, take-while {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :arglists (quote ([pred] [pred coll])), :doc "Ends the reduction of coll when (pred val) returns logical false.", :end-column 23, :end-line 152, :column 13, :line 152, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/take-while, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Ends the reduction of coll when (pred val) returns logical false.", :test true}, remove {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :arglists (quote ([pred] [pred coll])), :doc "Removes values in the reduction of coll for which (pred val)\n  returns logical true. Foldable.", :end-column 19, :end-line 145, :column 13, :line 145, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/remove, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Removes values in the reduction of coll for which (pred val)\n  returns logical true. Foldable.", :test true}, fjjoin {:protocol-inline nil, :meta {:arglists (quote ([task])), :private true, :end-column 14, :end-line 29, :column 8, :line 29, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :private true, :name clojure.core.reducers/fjjoin, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 14, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task])), :test true}, fjinvoke {:protocol-inline nil, :meta {:arglists (quote ([f])), :private true, :end-column 16, :end-line 23, :column 8, :line 23, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :private true, :name clojure.core.reducers/fjinvoke, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, ->t6999 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([xf coll folder meta7000])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{clojure.core.reducers/CollFold cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :anonymous true}, :protocols #{clojure.core.reducers/CollFold cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.reducers/->t6999, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :method-params ([xf coll folder meta7000]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 85, :max-fixed-arity 4, :fn-var true, :arglists (quote ([xf coll folder meta7000])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :test true}, t6990 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.reducers/t6990, :file "resources/public/js/out/clojure/core/reducers.cljs", :type true, :anonymous true, :column 6, :line 72, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}}, t6993 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.reducers/t6993, :file "resources/public/js/out/clojure/core/reducers.cljs", :type true, :anonymous true, :column 6, :line 72, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}}, ->t6990 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([xf coll reducer meta6991])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :anonymous true}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.reducers/->t6990, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :method-params ([xf coll reducer meta6991]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 72, :max-fixed-arity 4, :fn-var true, :arglists (quote ([xf coll reducer meta6991])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :test true}, CollFold {:meta {:protocol-info {:methods {coll-fold [[coll n combinef reducef]]}}, :protocol-symbol true, :doc nil, :end-column 22, :end-line 46, :column 14, :line 46, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :protocol-symbol true, :name clojure.core.reducers/CollFold, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 22, :column 1, :line 46, :protocol-info {:methods {coll-fold [[coll n combinef reducef]]}}, :info nil, :end-line 46, :impls #{nil object cljs.core/PersistentVector clojure.core.reducers/t6996 clojure.core.reducers/Cat clojure.core.reducers/t6999}, :doc nil, :test true}, folder {:protocol-inline nil, :meta {:arglists (quote ([coll xf])), :doc "Given a foldable collection, and a transformation function xf,\n  returns a foldable collection, where any supplied reducing\n  fn will be transformed by xf. xf is a function of reducing fn to\n  reducing fn.", :end-column 13, :end-line 79, :column 7, :line 79, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/folder, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 13, :method-params ([coll xf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll xf])), :doc "Given a foldable collection, and a transformation function xf,\n  returns a foldable collection, where any supplied reducing\n  fn will be transformed by xf. xf is a function of reducing fn to\n  reducing fn.", :test true}, append! {:protocol-inline nil, :meta {:arglists (quote ([acc x])), :doc ".adds x to acc and returns acc", :end-column 14, :end-line 232, :column 7, :line 232, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/append!, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 14, :method-params ([acc x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 2, :fn-var true, :arglists (quote ([acc x])), :doc ".adds x to acc and returns acc", :test true}, ->t6996 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([xf coll folder meta6997])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{clojure.core.reducers/CollFold cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :anonymous true}, :protocols #{clojure.core.reducers/CollFold cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.reducers/->t6996, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :method-params ([xf coll folder meta6997]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 85, :max-fixed-arity 4, :fn-var true, :arglists (quote ([xf coll folder meta6997])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :test true}, ->Cat {:protocol-inline nil, :meta {:arglists (quote ([cnt left right])), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted cljs.core/ISeqable cljs.core/IReduce}, :protocols #{clojure.core.reducers/CollFold cljs.core/ICounted cljs.core/ISeqable cljs.core/IReduce}, :end-column 13, :end-line 193, :column 10, :line 193, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :protocols #{clojure.core.reducers/CollFold cljs.core/ICounted cljs.core/ISeqable cljs.core/IReduce}, :name clojure.core.reducers/->Cat, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 13, :method-params ([cnt left right]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 193, :end-line 193, :max-fixed-arity 3, :fn-var true, :arglists (quote ([cnt left right])), :skip-protocol-flag #{cljs.core/ICounted cljs.core/ISeqable cljs.core/IReduce}, :test true}, drop {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}, :arglists (quote ([n] [n coll])), :doc "Elides the first n values from the reduction of coll.", :end-column 17, :end-line 178, :column 13, :line 178, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/drop, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}, :method-params ([n] [n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists ([n] [n coll]), :doc "Elides the first n values from the reduction of coll.", :test true}, fold {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reducef coll] [combinef reducef coll] [n combinef reducef coll]), :arglists ([reducef coll] [combinef reducef coll] [n combinef reducef coll]), :arglists-meta (nil nil nil)}, :arglists (quote ([reducef coll] [combinef reducef coll] [n combinef reducef coll])), :doc "Reduces a collection using a (potentially parallel) reduce-combine\n  strategy. The collection is partitioned into groups of approximately\n  n (default 512), each of which is reduced with reducef (with a seed\n  value obtained by calling (combinef) with no arguments). The results\n  of these reductions are then reduced with combinef (default\n  reducef). combinef must be associative, and, when called with no\n  arguments, (combinef) must produce its identity element. These\n  operations may be performed in parallel, but the results will\n  preserve order.\n\n  Note: Performing operations in parallel is currently not implemented.", :end-column 11, :end-line 49, :column 7, :line 49, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/fold, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reducef coll] [combinef reducef coll] [n combinef reducef coll]), :arglists ([reducef coll] [combinef reducef coll] [n combinef reducef coll]), :arglists-meta (nil nil nil)}, :method-params ([reducef coll] [combinef reducef coll] [n combinef reducef coll]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 4, :fn-var true, :arglists ([reducef coll] [combinef reducef coll] [n combinef reducef coll]), :doc "Reduces a collection using a (potentially parallel) reduce-combine\n  strategy. The collection is partitioned into groups of approximately\n  n (default 512), each of which is reduced with reducef (with a seed\n  value obtained by calling (combinef) with no arguments). The results\n  of these reductions are then reduced with combinef (default\n  reducef). combinef must be associative, and, when called with no\n  arguments, (combinef) must produce its identity element. These\n  operations may be performed in parallel, but the results will\n  preserve order.\n\n  Note: Performing operations in parallel is currently not implemented.", :test true}, t6999 {:num-fields 4, :protocols #{clojure.core.reducers/CollFold cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.reducers/t6999, :file "resources/public/js/out/clojure/core/reducers.cljs", :type true, :anonymous true, :column 6, :line 85, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}}, Cat {:num-fields 3, :protocols #{clojure.core.reducers/CollFold cljs.core/ICounted cljs.core/ISeqable cljs.core/IReduce}, :name clojure.core.reducers/Cat, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 13, :type true, :column 10, :line 193, :record false, :end-line 193, :skip-protocol-flag #{cljs.core/ICounted cljs.core/ISeqable cljs.core/IReduce}}, flatten {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}, :arglists (quote ([] [coll])), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat foldable\n  collection.", :end-column 20, :end-line 130, :column 13, :line 130, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/flatten, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}, :method-params ([] [coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists ([] [coll]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat foldable\n  collection.", :test true}, filter {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :arglists (quote ([pred] [pred coll])), :doc "Retains values in the reduction of coll for which (pred val)\n  returns logical true. Foldable.", :end-column 19, :end-line 117, :column 13, :line 117, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/filter, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Retains values in the reduction of coll for which (pred val)\n  returns logical true. Foldable.", :test true}, fjtask {:protocol-inline nil, :meta {:arglists (quote ([f])), :private true, :end-column 14, :end-line 20, :column 8, :line 20, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :private true, :name clojure.core.reducers/fjtask, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 14, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, monoid {:protocol-inline nil, :meta {:arglists (quote ([op ctor])), :doc "Builds a combining fn out of the supplied operator and identity\n  constructor. op must be associative and ctor called with no args\n  must return an identity value for it.", :end-column 13, :end-line 242, :column 7, :line 242, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :name clojure.core.reducers/monoid, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 13, :method-params ([op ctor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([op ctor])), :doc "Builds a combining fn out of the supplied operator and identity\n  constructor. op must be associative and ctor called with no args\n  must return an identity value for it.", :test true}, ->t6993 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([xf coll reducer meta6994])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :anonymous true}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.reducers/->t6993, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :method-params ([xf coll reducer meta6994]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 72, :max-fixed-arity 4, :fn-var true, :arglists (quote ([xf coll reducer meta6994])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/IReduce}, :test true}, coll-fold {:protocol-inline nil, :meta {:arglists (quote ([coll n combinef reducef])), :doc nil, :protocol clojure.core.reducers/CollFold, :end-column 13, :end-line 47, :column 4, :line 47, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :protocol clojure.core.reducers/CollFold, :name clojure.core.reducers/coll-fold, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 13, :method-params ([coll n combinef reducef]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 47, :max-fixed-arity 4, :fn-var true, :arglists (quote ([coll n combinef reducef])), :doc nil, :test true}, foldvec {:protocol-inline nil, :meta {:arglists (quote ([v n combinef reducef])), :private true, :end-column 15, :end-line 273, :column 8, :line 273, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :private true, :name clojure.core.reducers/foldvec, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 15, :method-params ([v n combinef reducef]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 4, :fn-var true, :arglists (quote ([v n combinef reducef])), :test true}, fjfork {:protocol-inline nil, :meta {:arglists (quote ([task])), :private true, :end-column 14, :end-line 26, :column 8, :line 26, :file "/Users/kovasb/repo/gamma/resources/public/js/out/clojure/core/reducers.cljs"}, :private true, :name clojure.core.reducers/fjfork, :variadic false, :file "resources/public/js/out/clojure/core/reducers.cljs", :end-column 14, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else], :seen #{:else}}, :doc "A library for reduction and parallel folding. Alpha and subject\n      to change.  Note that fold and its derivatives require\n      jsr166y.jar for fork/join support. See Clojure's pom.xml for the\n      dependency info."}