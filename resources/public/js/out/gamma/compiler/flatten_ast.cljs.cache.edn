;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name gamma.compiler.flatten-ast, :imports nil, :requires {gamma.ast gamma.ast, clojure.walk clojure.walk}, :uses nil, :defs {->tree {:protocol-inline nil, :meta {:arglists (quote ([db id])), :end-column 13, :end-line 28, :column 7, :line 28, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/flatten_ast.cljs"}, :name gamma.compiler.flatten-ast/->tree, :variadic false, :file "src/gamma/compiler/flatten_ast.cljs", :end-column 13, :method-params ([db id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db id])), :test true}, flatten-ast {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([node] [db node parent-id]), :arglists ([node] [db node parent-id]), :arglists-meta (nil nil)}, :arglists (quote ([node] [db node parent-id])), :end-column 18, :end-line 5, :column 7, :line 5, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/flatten_ast.cljs"}, :name gamma.compiler.flatten-ast/flatten-ast, :variadic false, :file "src/gamma/compiler/flatten_ast.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([node] [db node parent-id]), :arglists ([node] [db node parent-id]), :arglists-meta (nil nil)}, :method-params ([node] [db node parent-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 3, :fn-var true, :arglists ([node] [db node parent-id]), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:block :head :root :id :body :parents :literal], :seen #{:block :head :root :id :literal :parents :body}}, :doc nil}