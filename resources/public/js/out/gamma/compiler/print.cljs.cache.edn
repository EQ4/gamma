;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name gamma.compiler.print, :imports nil, :requires {fipp.printer fipp.printer, gamma.ast gamma.ast}, :uses {id? gamma.ast}, :defs {helper {:protocol-inline nil, :meta {:arglists (quote ([db paths list])), :end-column 13, :end-line 104, :column 7, :line 104, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/helper, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 13, :method-params ([db paths list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db paths list])), :test true}, pretty-map {:protocol-inline nil, :meta {:arglists (quote ([trans m])), :end-column 17, :end-line 20, :column 7, :line 20, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/pretty-map, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 17, :method-params ([trans m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([trans m])), :test true}, ->Dispatcher {:protocol-inline nil, :meta {:arglists (quote ([dispatch-fn])), :factory :positional, :skip-protocol-flag #{cljs.core/IFn}, :protocols #{cljs.core/IFn}, :end-column 20, :end-line 46, :column 10, :line 46, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :protocols #{cljs.core/IFn}, :name gamma.compiler.print/->Dispatcher, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 20, :method-params ([dispatch-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dispatch-fn])), :skip-protocol-flag #{cljs.core/IFn}, :test true}, ast-doc3 {:protocol-inline nil, :meta {:arglists (quote ([db node-id paths])), :end-column 15, :end-line 142, :column 7, :line 142, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/ast-doc3, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 15, :method-params ([db node-id paths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db node-id paths])), :test true}, helper2 {:protocol-inline nil, :meta {:arglists (quote ([db paths list])), :end-column 14, :end-line 135, :column 7, :line 135, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/helper2, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 14, :method-params ([db paths list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db paths list])), :test true}, print-ast2 {:protocol-inline nil, :meta {:arglists (quote ([x w])), :end-column 17, :end-line 164, :column 7, :line 164, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/print-ast2, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 17, :method-params ([x w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x w])), :test true}, printer {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 14, :end-line 50, :column 7, :line 50, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/printer, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, ast-doc2 {:protocol-inline nil, :meta {:arglists (quote ([db node-id paths])), :end-column 15, :end-line 111, :column 7, :line 111, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/ast-doc2, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 15, :method-params ([db node-id paths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db node-id paths])), :test true}, pretty-set {:protocol-inline nil, :meta {:arglists (quote ([trans s])), :end-column 17, :end-line 30, :column 7, :line 30, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/pretty-set, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 17, :method-params ([trans s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([trans s])), :test true}, pretty-object {:protocol-inline nil, :meta {:arglists (quote ([trans x])), :end-column 20, :end-line 11, :column 7, :line 11, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/pretty-object, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 20, :method-params ([trans x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([trans x])), :test true}, pretty-seq {:protocol-inline nil, :meta {:arglists (quote ([trans s])), :end-column 17, :end-line 17, :column 7, :line 17, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/pretty-seq, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 17, :method-params ([trans s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([trans s])), :test true}, pretty-vector {:protocol-inline nil, :meta {:arglists (quote ([trans v])), :end-column 20, :end-line 14, :column 7, :line 14, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/pretty-vector, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 20, :method-params ([trans v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([trans v])), :test true}, print-ast {:protocol-inline nil, :meta {:arglists (quote ([x f w])), :end-column 16, :end-line 95, :column 7, :line 95, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/print-ast, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 16, :method-params ([x f w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x f w])), :test true}, pretty-nil {:protocol-inline nil, :meta {:arglists (quote ([trans x])), :end-column 17, :end-line 8, :column 7, :line 8, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/pretty-nil, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 17, :method-params ([trans x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([trans x])), :test true}, pretty-term {:protocol-inline nil, :meta {:arglists (quote ([trans x])), :end-column 18, :end-line 36, :column 7, :line 36, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/pretty-term, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 18, :method-params ([trans x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([trans x])), :test true}, Dispatcher {:num-fields 1, :protocols #{cljs.core/IFn}, :name gamma.compiler.print/Dispatcher, :file "src/gamma/compiler/print.cljs", :end-column 20, :type true, :column 10, :line 46, :record false, :end-line 46, :skip-protocol-flag #{cljs.core/IFn}}, ast-doc {:protocol-inline nil, :meta {:arglists (quote ([db node-id f])), :end-column 14, :end-line 74, :column 7, :line 74, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/print.cljs"}, :name gamma.compiler.print/ast-doc, :variadic false, :file "src/gamma/compiler/print.cljs", :end-column 14, :method-params ([db node-id f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db node-id f])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:text :group :align :line :span :head :id :tag :term :default :root :literal :body :nest :width :value :assignments :shared], :seen #{:nest :assignments :align :group :default :value :width :term :head :line :root :id :literal :shared :tag :body :text :span}}, :doc nil}