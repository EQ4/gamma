;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name gamma.compiler.separate-usages, :imports nil, :requires {gamma.compiler.common gamma.compiler.common, gamma.ast gamma.ast, clojure.set clojure.set}, :uses {union clojure.set, id? gamma.ast, intersection clojure.set, assoc-in-parent gamma.compiler.common, merge-elements gamma.compiler.common, gen-term-id gamma.ast, location-conj gamma.compiler.common, map-path gamma.compiler.common, get-element gamma.compiler.common, difference clojure.set, assoc-elements gamma.compiler.common}, :defs {separate-usages {:protocol-inline nil, :meta {:arglists (quote ([source-db id-mapping bound-ids])), :end-column 22, :end-line 149, :column 7, :line 149, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/separate-usages, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 22, :method-params ([source-db id-mapping bound-ids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 3, :fn-var true, :arglists (quote ([source-db id-mapping bound-ids])), :test true}, take-1 {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Returns the pair [element, s'] where s' is set s with element removed.", :end-column 13, :end-line 16, :column 7, :line 16, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/take-1, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns the pair [element, s'] where s' is set s with element removed.", :test true}, normalize {:protocol-inline nil, :meta {:arglists (quote ([g])), :doc "Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}", :end-column 16, :end-line 30, :column 7, :line 30, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/normalize, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 16, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}", :test true}, shared-elements {:protocol-inline nil, :meta {:arglists (quote ([id-mappings source-element source-db])), :end-column 22, :end-line 110, :column 7, :line 110, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/shared-elements, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 22, :method-params ([id-mappings source-element source-db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 3, :fn-var true, :arglists (quote ([id-mappings source-element source-db])), :test true}, kahn-sort {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([g] [g l s]), :arglists ([g] [g l s]), :arglists-meta (nil nil)}, :arglists (quote ([g] [g l s])), :doc "Proposes a topological sort for directed graph g using Kahn's\n   algorithm, where g is a map of nodes to sets of nodes. If g is\n   cyclic, returns nil.", :end-column 16, :end-line 37, :column 7, :line 37, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/kahn-sort, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([g] [g l s]), :arglists ([g] [g l s]), :arglists-meta (nil nil)}, :method-params ([g] [g l s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 3, :fn-var true, :arglists ([g] [g l s]), :doc "Proposes a topological sort for directed graph g using Kahn's\n   algorithm, where g is a map of nodes to sets of nodes. If g is\n   cyclic, returns nil.", :test true}, get-shared {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 17, :end-line 80, :column 7, :line 80, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/get-shared, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, no-incoming {:protocol-inline nil, :meta {:arglists (quote ([g])), :doc "Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes.", :end-column 18, :end-line 22, :column 7, :line 22, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/no-incoming, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 18, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes.", :test true}, topological-sort {:protocol-inline nil, :meta {:arglists (quote ([ids db])), :end-column 23, :end-line 88, :column 7, :line 88, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/topological-sort, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 23, :method-params ([ids db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ids db])), :test true}, without {:protocol-inline nil, :meta {:arglists (quote ([s x])), :doc "Returns set s with x removed.", :end-column 14, :end-line 12, :column 7, :line 12, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/without, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 14, :method-params ([s x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s x])), :doc "Returns set s with x removed.", :test true}, body-elements {:protocol-inline nil, :meta {:arglists (quote ([source-element id-mappings])), :end-column 20, :end-line 131, :column 7, :line 131, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/body-elements, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 20, :method-params ([source-element id-mappings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source-element id-mappings])), :test true}, assoc-attributes {:protocol-inline nil, :meta {:arglists (quote ([db location source-element bound-ids])), :end-column 23, :end-line 139, :column 7, :line 139, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/separate_usages.cljs"}, :name gamma.compiler.separate-usages/assoc-attributes, :variadic false, :file "src/gamma/compiler/separate_usages.cljs", :end-column 23, :method-params ([db location source-element bound-ids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 4, :fn-var true, :arglists (quote ([db location source-element bound-ids])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:unconditional :conditional :shared :elements :env :id-mapping :source-id :id :body], :seen #{:id-mapping :env :elements :id :shared :unconditional :source-id :body :conditional}}, :doc nil}