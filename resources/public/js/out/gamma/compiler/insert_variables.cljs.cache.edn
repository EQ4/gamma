;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name gamma.compiler.insert-variables, :imports nil, :requires {gamma.compiler.common gamma.compiler.common, gamma.ast gamma.ast}, :uses {id? gamma.ast, gen-term-id gamma.ast, assoc-in-location gamma.compiler.common, map-path gamma.compiler.common, get-element gamma.compiler.common, assoc-elements gamma.compiler.common}, :defs {insert-variables {:protocol-inline nil, :meta {:arglists (quote ([env])), :end-column 23, :end-line 19, :column 7, :line 19, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/insert_variables.cljs"}, :name gamma.compiler.insert-variables/insert-variables, :variadic false, :file "src/gamma/compiler/insert_variables.cljs", :end-column 23, :method-params ([env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([env])), :test true}, parent-env {:protocol-inline nil, :meta {:arglists (quote ([db location])), :end-column 17, :end-line 16, :column 7, :line 16, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/insert_variables.cljs"}, :name gamma.compiler.insert-variables/parent-env, :variadic false, :file "src/gamma/compiler/insert_variables.cljs", :end-column 17, :method-params ([db location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db location])), :test true}, insert-variables-sub {:protocol-inline nil, :meta {:arglists (quote ([db location])), :end-column 27, :end-line 7, :column 7, :line 7, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/insert_variables.cljs"}, :name gamma.compiler.insert-variables/insert-variables-sub, :variadic false, :file "src/gamma/compiler/insert_variables.cljs", :end-column 27, :method-params ([db location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db location])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:parent :id :head :tag :type :value :literal :term :variable :env :assignments :body], :seen #{:assignments :variable :parent :value :type :env :term :head :id :literal :tag :body}}, :doc nil}