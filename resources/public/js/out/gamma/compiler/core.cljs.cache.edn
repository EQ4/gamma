;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name gamma.compiler.core, :imports nil, :requires {gamma.compiler.move-assignments gamma.compiler.move-assignments, gamma.compiler.insert-variables gamma.compiler.insert-variables, gamma.compiler.separate-usages gamma.compiler.separate-usages, gamma.compiler.lift-assignments gamma.compiler.lift-assignments, gamma.compiler.insert-assignments gamma.compiler.insert-assignments, gamma.compiler.bubble-term gamma.compiler.bubble-term, gamma.compiler.flatten-ast gamma.compiler.flatten-ast, gamma.ast gamma.ast, gamma.compiler.common gamma.compiler.common}, :uses {separate-usages gamma.compiler.separate-usages, flatten-ast gamma.compiler.flatten-ast, id? gamma.ast, insert-variables gamma.compiler.insert-variables, insert-assignments gamma.compiler.insert-assignments, location-conj gamma.compiler.common, move-assignments gamma.compiler.move-assignments, term gamma.ast, map-path gamma.compiler.common, bubble-terms gamma.compiler.bubble-term, lift-assignments gamma.compiler.lift-assignments, get-element gamma.compiler.common}, :defs {compile {:protocol-inline nil, :meta {:arglists (quote ([input])), :end-column 14, :end-line 72, :column 7, :line 72, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/core.cljs"}, :name gamma.compiler.core/compile, :variadic false, :file "src/gamma/compiler/core.cljs", :end-column 14, :method-params ([input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input])), :test true}, variables {:protocol-inline nil, :meta {:arglists (quote ([db])), :end-column 16, :end-line 54, :column 7, :line 54, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/core.cljs"}, :name gamma.compiler.core/variables, :variadic false, :file "src/gamma/compiler/core.cljs", :end-column 16, :method-params ([db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([db])), :test true}, walk {:protocol-inline nil, :meta {:arglists (quote ([db pre])), :end-column 11, :end-line 46, :column 7, :line 46, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/core.cljs"}, :name gamma.compiler.core/walk, :variadic false, :file "src/gamma/compiler/core.cljs", :end-column 11, :method-params ([db pre]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db pre])), :test true}, transform {:protocol-inline nil, :meta {:arglists (quote ([db f])), :end-column 16, :end-line 39, :column 7, :line 39, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/core.cljs"}, :name gamma.compiler.core/transform, :variadic false, :file "src/gamma/compiler/core.cljs", :end-column 16, :method-params ([db f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db f])), :test true}, transform-1 {:protocol-inline nil, :meta {:arglists (quote ([db stack])), :end-column 18, :end-line 26, :column 7, :line 26, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/core.cljs"}, :name gamma.compiler.core/transform-1, :variadic false, :file "src/gamma/compiler/core.cljs", :end-column 18, :method-params ([db stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db stack])), :test true}, push-ops {:protocol-inline nil, :meta {:arglists (quote ([db ops location stack])), :end-column 15, :end-line 16, :column 7, :line 16, :file "/Users/kovasb/repo/gamma/src/gamma/compiler/core.cljs"}, :name gamma.compiler.core/push-ops, :variadic false, :file "src/gamma/compiler/core.cljs", :end-column 15, :method-params ([db ops location stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 4, :fn-var true, :arglists (quote ([db ops location stack])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:id :path :root :body :literal :head :variable :tag :value :type :source-id], :seen #{:path :variable :value :type :head :root :id :literal :source-id :tag :body}}, :doc nil}