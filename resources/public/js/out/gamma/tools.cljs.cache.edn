;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name gamma.tools, :imports nil, :requires {gamma.ast gamma.ast, gamma.emit.tag gamma.emit.tag, gamma.emit.statement gamma.emit.statement, gamma.emit.operator gamma.emit.operator, gamma.compiler.move-assignments gamma.compiler.move-assignments, gamma.emit.emit gamma.emit.emit, gamma.compiler.flatten-ast gamma.compiler.flatten-ast, gamma.compiler.insert-variables gamma.compiler.insert-variables, gamma.api gamma.api, gamma.emit.constructor gamma.emit.constructor, gamma.compiler.bubble-term gamma.compiler.bubble-term, gamma.compiler.separate-usages gamma.compiler.separate-usages, gamma.compiler.core gamma.compiler.core, g gamma.api, gamma.compiler.lift-assignments gamma.compiler.lift-assignments, clojure.string clojure.string, gamma.compiler.common gamma.compiler.common, gamma.compiler.print gamma.compiler.print, gamma.emit.fun gamma.emit.fun, gamma.compiler.insert-assignments gamma.compiler.insert-assignments}, :uses {separate-usages gamma.compiler.separate-usages, flatten-ast gamma.compiler.flatten-ast, printer gamma.compiler.print, id? gamma.ast, transform gamma.compiler.core, insert-variables gamma.compiler.insert-variables, insert-assignments gamma.compiler.insert-assignments, location-conj gamma.compiler.common, move-assignments gamma.compiler.move-assignments, term gamma.ast, map-path gamma.compiler.common, bubble-terms gamma.compiler.bubble-term, lift-assignments gamma.compiler.lift-assignments, get-element gamma.compiler.common, emit gamma.emit.emit}, :defs {glsl-string {:protocol-inline nil, :meta {:arglists (quote ([ast])), :end-column 18, :end-line 91, :column 7, :line 91, :file "/Users/kovasb/repo/gamma/src/gamma/tools.cljs"}, :name gamma.tools/glsl-string, :variadic false, :file "src/gamma/tools.cljs", :end-column 18, :method-params ([ast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ast])), :test true}, glsl-stage {:protocol-inline nil, :meta {:arglists (quote ([stages stage])), :end-column 17, :end-line 83, :column 7, :line 83, :file "/Users/kovasb/repo/gamma/src/gamma/tools.cljs"}, :name gamma.tools/glsl-stage, :variadic false, :file "src/gamma/tools.cljs", :end-column 17, :method-params ([stages stage]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stages stage])), :test true}, print-tree {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 17, :end-line 78, :column 7, :line 78, :file "/Users/kovasb/repo/gamma/src/gamma/tools.cljs"}, :name gamma.tools/print-tree, :variadic false, :file "src/gamma/tools.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, print-dag {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 16, :end-line 72, :column 7, :line 72, :file "/Users/kovasb/repo/gamma/src/gamma/tools.cljs"}, :name gamma.tools/print-dag, :variadic false, :file "src/gamma/tools.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, print-stage {:protocol-inline nil, :meta {:arglists (quote ([stages stage])), :end-column 18, :end-line 64, :column 7, :line 64, :file "/Users/kovasb/repo/gamma/src/gamma/tools.cljs"}, :name gamma.tools/print-stage, :variadic false, :file "src/gamma/tools.cljs", :end-column 18, :method-params ([stages stage]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stages stage])), :test true}, compile-stages {:protocol-inline nil, :meta {:arglists (quote ([input])), :end-column 21, :end-line 50, :column 7, :line 50, :file "/Users/kovasb/repo/gamma/src/gamma/tools.cljs"}, :name gamma.tools/compile-stages, :variadic false, :file "src/gamma/tools.cljs", :end-column 21, :method-params ([input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input])), :test true}, stages {:meta {:end-column 12, :end-line 47, :column 6, :line 47, :file "/Users/kovasb/repo/gamma/src/gamma/tools.cljs"}, :file "src/gamma/tools.cljs", :line 47, :column 1, :end-line 47, :end-column 12, :test true, :name gamma.tools/stages}, stages-map {:meta {:end-column 16, :end-line 27, :column 6, :line 27, :file "/Users/kovasb/repo/gamma/src/gamma/tools.cljs"}, :file "src/gamma/tools.cljs", :line 27, :column 1, :end-line 27, :end-column 16, :test true, :name gamma.tools/stages-map}}, :require-macros {gamma.api gamma.api, g gamma.api}, :cljs.analyzer/constants {:order [:flatten-ast :bubble-terms :separate-usages :lift-assignments :insert-variables :insert-assignments :move-assignments :root :source-id :id :stages :exception-at :else :width], :seen #{:stages :else :insert-variables :insert-assignments :width :move-assignments :lift-assignments :bubble-terms :root :id :exception-at :source-id :separate-usages :flatten-ast}}, :doc nil}