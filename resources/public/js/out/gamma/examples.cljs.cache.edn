;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name gamma.examples, :imports nil, :requires {gamma.ast gamma.ast, gamma.emit.tag gamma.emit.tag, gamma.emit.statement gamma.emit.statement, gamma.emit.operator gamma.emit.operator, gamma.compiler.move-assignments gamma.compiler.move-assignments, gamma.emit.emit gamma.emit.emit, gamma.compiler.flatten-ast gamma.compiler.flatten-ast, gamma.compiler.insert-variables gamma.compiler.insert-variables, gamma.api gamma.api, ast gamma.ast, gamma.compiler.bubble-term gamma.compiler.bubble-term, gamma.compiler.separate-usages gamma.compiler.separate-usages, gamma.compiler.core gamma.compiler.core, g gamma.api, gamma.compiler.lift-assignments gamma.compiler.lift-assignments, gamma.compiler.common gamma.compiler.common, gamma.compiler.print gamma.compiler.print, gamma.emit.fun gamma.emit.fun, gamma.compiler.insert-assignments gamma.compiler.insert-assignments}, :uses {ast-doc3 gamma.compiler.print, separate-usages gamma.compiler.separate-usages, flatten-ast gamma.compiler.flatten-ast, ast-doc2 gamma.compiler.print, transform gamma.compiler.core, insert-variables gamma.compiler.insert-variables, insert-assignments gamma.compiler.insert-assignments, move-assignments gamma.compiler.move-assignments, assoc-in-location gamma.compiler.common, map-path gamma.compiler.common, bubble-terms gamma.compiler.bubble-term, lift-assignments gamma.compiler.lift-assignments, get-element gamma.compiler.common, assoc-elements gamma.compiler.common, emit gamma.emit.emit}, :defs {emit-program {:protocol-inline nil, :meta {:arglists (quote ([db])), :end-column 19, :end-line 108, :column 7, :line 108, :file "/Users/kovasb/repo/gamma/src/gamma/examples.cljs"}, :name gamma.examples/emit-program, :variadic false, :file "src/gamma/examples.cljs", :end-column 19, :method-params ([db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([db])), :test true}, program {:protocol-inline nil, :meta {:arglists (quote ([db])), :end-column 14, :end-line 97, :column 7, :line 97, :file "/Users/kovasb/repo/gamma/src/gamma/examples.cljs"}, :name gamma.examples/program, :variadic false, :file "src/gamma/examples.cljs", :end-column 14, :method-params ([db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([db])), :test true}, variables {:protocol-inline nil, :meta {:arglists (quote ([db])), :end-column 16, :end-line 80, :column 7, :line 80, :file "/Users/kovasb/repo/gamma/src/gamma/examples.cljs"}, :name gamma.examples/variables, :variadic false, :file "src/gamma/examples.cljs", :end-column 16, :method-params ([db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([db])), :test true}, walk {:protocol-inline nil, :meta {:arglists (quote ([db pre])), :end-column 11, :end-line 72, :column 7, :line 72, :file "/Users/kovasb/repo/gamma/src/gamma/examples.cljs"}, :name gamma.examples/walk, :variadic false, :file "src/gamma/examples.cljs", :end-column 11, :method-params ([db pre]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db pre])), :test true}, shader-str {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 17, :end-line 68, :column 7, :line 68, :file "/Users/kovasb/repo/gamma/src/gamma/examples.cljs"}, :name gamma.examples/shader-str, :variadic false, :file "src/gamma/examples.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, show {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 11, :end-line 62, :column 7, :line 62, :file "/Users/kovasb/repo/gamma/src/gamma/examples.cljs"}, :name gamma.examples/show, :variadic false, :file "src/gamma/examples.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, show-ast {:protocol-inline nil, :meta {:arglists (quote ([y])), :end-column 15, :end-line 54, :column 7, :line 54, :file "/Users/kovasb/repo/gamma/src/gamma/examples.cljs"}, :name gamma.examples/show-ast, :variadic false, :file "src/gamma/examples.cljs", :end-column 15, :method-params ([y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([y])), :test true}, gcompile {:protocol-inline nil, :meta {:arglists (quote ([input])), :end-column 15, :end-line 40, :column 7, :line 40, :file "/Users/kovasb/repo/gamma/src/gamma/examples.cljs"}, :name gamma.examples/gcompile, :variadic false, :file "src/gamma/examples.cljs", :end-column 15, :method-params ([input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input])), :test true}}, :require-macros {gamma.api gamma.api, g gamma.api}, :cljs.analyzer/constants {:order [:root :source-id :id :body :width :literal :head :variable :tag :value :type :attribute :varying :uniform :storage :global-variables :local-variables :program], :seen #{:attribute :variable :value :width :type :local-variables :head :varying :root :uniform :id :global-variables :literal :storage :source-id :tag :body :program}}, :doc nil}