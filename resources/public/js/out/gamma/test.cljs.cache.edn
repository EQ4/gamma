;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{test}, :name gamma.test, :imports nil, :requires {gamma.ast gamma.ast, gamma.emit.tag gamma.emit.tag, gamma.emit.statement gamma.emit.statement, gamma.emit.operator gamma.emit.operator, walk clojure.walk, prn gamma.compiler.print, gamma.emit.emit gamma.emit.emit, gamma.compiler.flatten-ast gamma.compiler.flatten-ast, gamma.api gamma.api, ast gamma.ast, gamma.emit.constructor gamma.emit.constructor, gamma.tools gamma.tools, g gamma.api, fipp.printer fipp.printer, clojure.walk clojure.walk, gamma.compiler.print gamma.compiler.print, gamma.emit.fun gamma.emit.fun}, :uses {compile-stages gamma.tools, glsl-stage gamma.tools, print-dag gamma.tools, glsl-string gamma.tools, stages gamma.tools, ->tree gamma.compiler.flatten-ast, print-tree gamma.tools, emit gamma.emit.emit, stages-map gamma.tools}, :defs {trim-keys {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 16, :end-line 32, :column 7, :line 32, :file "/Users/kovasb/repo/gamma/src/gamma/test.cljs"}, :name gamma.test/trim-keys, :variadic false, :file "src/gamma/test.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, test {:protocol-inline nil, :meta {:arglists (quote ([p])), :end-column 11, :end-line 20, :column 7, :line 20, :file "/Users/kovasb/repo/gamma/src/gamma/test.cljs"}, :name gamma.test/test, :variadic false, :file "src/gamma/test.cljs", :end-column 11, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :test true}}, :require-macros {gamma.api gamma.api, g gamma.api}, :cljs.analyzer/constants {:order [:move-assignments :insert-assignments :insert-variables :lift-assignments :separate-usages :bubble-terms :flatten-ast :env :shared], :seen #{:insert-variables :insert-assignments :move-assignments :env :lift-assignments :bubble-terms :shared :separate-usages :flatten-ast}}, :doc nil}