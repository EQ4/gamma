;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name gamma.program, :imports nil, :requires {gamma.emit.tag gamma.emit.tag, gamma.emit.statement gamma.emit.statement, gamma.emit.operator gamma.emit.operator, gamma.webgl gamma.webgl, goog.webgl goog.webgl, gamma.emit.emit gamma.emit.emit, gamma.api gamma.api, gamma.emit.constructor gamma.emit.constructor, webgl gamma.webgl, gamma.compiler.core gamma.compiler.core, g gamma.api, fipp.printer fipp.printer, ggl goog.webgl, emit gamma.emit.emit, gamma.emit.fun gamma.emit.fun}, :uses nil, :defs {program {:protocol-inline nil, :meta {:arglists (quote ([vertex-shader fragment-shader])), :end-column 14, :end-line 65, :column 7, :line 65, :file "/Users/kovasb/repo/gamma/src/gamma/program.cljs"}, :name gamma.program/program, :variadic false, :file "src/gamma/program.cljs", :end-column 14, :method-params ([vertex-shader fragment-shader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vertex-shader fragment-shader])), :test true}, program-inputs {:protocol-inline nil, :meta {:arglists (quote ([vs fs])), :end-column 21, :end-line 59, :column 7, :line 59, :file "/Users/kovasb/repo/gamma/src/gamma/program.cljs"}, :name gamma.program/program-inputs, :variadic false, :file "src/gamma/program.cljs", :end-column 21, :method-params ([vs fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vs fs])), :test true}, shader {:protocol-inline nil, :meta {:arglists (quote ([shader])), :end-column 13, :end-line 32, :column 7, :line 32, :file "/Users/kovasb/repo/gamma/src/gamma/program.cljs"}, :name gamma.program/shader, :variadic false, :file "src/gamma/program.cljs", :end-column 13, :method-params ([shader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shader])), :test true}, ast {:protocol-inline nil, :meta {:arglists (quote ([inputs])), :end-column 10, :end-line 24, :column 7, :line 24, :file "/Users/kovasb/repo/gamma/src/gamma/program.cljs"}, :name gamma.program/ast, :variadic false, :file "src/gamma/program.cljs", :end-column 10, :method-params ([inputs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([inputs])), :test true}, glsl {:protocol-inline nil, :meta {:arglists (quote ([shader])), :end-column 11, :end-line 18, :column 7, :line 18, :file "/Users/kovasb/repo/gamma/src/gamma/program.cljs"}, :name gamma.program/glsl, :variadic false, :file "src/gamma/program.cljs", :end-column 11, :method-params ([shader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shader])), :test true}}, :require-macros {gamma.api gamma.api, g gamma.api}, :cljs.analyzer/constants {:order [:ir :width :attribute :varying :uniform :storage :tag :inputs :outputs :locals :ast :shader :glsl :vertex-shader :fragment-shader :program], :seen #{:attribute :fragment-shader :glsl :locals :width :ast :vertex-shader :inputs :varying :uniform :outputs :storage :tag :ir :program :shader}}, :doc nil}