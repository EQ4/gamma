;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name gamma.ast, :imports nil, :requires nil, :uses nil, :defs {vector-types {:meta {:end-column 18, :end-line 99, :column 6, :line 99, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 99, :column 1, :end-line 99, :end-column 18, :test true, :name gamma.ast/vector-types}, body {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 11, :end-line 7, :column 7, :line 7, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :name gamma.ast/body, :variadic false, :file "src/gamma/ast.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, statements {:meta {:end-column 16, :end-line 88, :column 6, :line 88, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 88, :column 1, :end-line 88, :end-column 16, :test true, :name gamma.ast/statements}, matrix-functions {:meta {:end-column 22, :end-line 232, :column 6, :line 232, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 232, :column 1, :end-line 232, :end-column 22, :test true, :name gamma.ast/matrix-functions}, term-counter {:meta {:end-column 18, :end-line 9, :column 6, :line 9, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 9, :column 1, :end-line 9, :end-column 18, :test true, :name gamma.ast/term-counter}, id? {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 10, :end-line 13, :column 7, :line 13, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :name gamma.ast/id?, :variadic false, :file "src/gamma/ast.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, vector-class {:protocol-inline nil, :meta {:arglists (quote ([primitive-type])), :end-column 19, :end-line 95, :column 7, :line 95, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :name gamma.ast/vector-class, :variadic false, :file "src/gamma/ast.cljs", :end-column 19, :method-params ([primitive-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([primitive-type])), :test true}, term? {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 12, :end-line 18, :column 7, :line 18, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :name gamma.ast/term?, :variadic false, :file "src/gamma/ast.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, qualifiers {:meta {:end-column 16, :end-line 80, :column 6, :line 80, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 80, :column 1, :end-line 80, :end-column 16, :test true, :name gamma.ast/qualifiers}, gen-term-id {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 16, :column 7, :line 16, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :name gamma.ast/gen-term-id, :variadic false, :file "src/gamma/ast.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, functions {:meta {:end-column 15, :end-line 261, :column 6, :line 261, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 261, :column 1, :end-line 261, :end-column 15, :test true, :name gamma.ast/functions}, matrix-types {:meta {:end-column 18, :end-line 103, :column 6, :line 103, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 103, :column 1, :end-line 103, :end-column 18, :test true, :name gamma.ast/matrix-types}, vector-relational-functions {:meta {:end-column 33, :end-line 242, :column 6, :line 242, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 242, :column 1, :end-line 242, :end-column 33, :test true, :name gamma.ast/vector-relational-functions}, standard-functions {:meta {:end-column 24, :end-line 159, :column 6, :line 159, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 159, :column 1, :end-line 159, :end-column 24, :test true, :name gamma.ast/standard-functions}, term {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(h args)], :arglists [[h & args]], :arglists-meta (nil)}, :arglists (quote ([h & args])), :end-column 11, :end-line 41, :column 7, :line 41, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :name gamma.ast/term, :variadic true, :file "src/gamma/ast.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(h args)], :arglists [[h & args]], :arglists-meta (nil)}, :method-params [(h args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists [[h & args]], :test true}, head {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 11, :end-line 6, :column 7, :line 6, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :name gamma.ast/head, :variadic false, :file "src/gamma/ast.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, primitive-types {:meta {:end-column 21, :end-line 71, :column 6, :line 71, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 71, :column 1, :end-line 71, :end-column 21, :test true, :name gamma.ast/primitive-types}, operators {:meta {:end-column 15, :end-line 113, :column 6, :line 113, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :file "src/gamma/ast.cljs", :line 113, :column 1, :end-line 113, :end-column 15, :test true, :name gamma.ast/operators}, literal {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 14, :end-line 27, :column 7, :line 27, :file "/Users/kovasb/repo/gamma/src/gamma/ast.cljs"}, :name gamma.ast/literal, :variadic false, :file "src/gamma/ast.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:head :body :id :tag :term :bool :float :type :default :value :literal :int :storage :precision :invariant :const :attribute :uniform :varying :highp :mediump :lowp :in :out :inout :if :if-else :continue :break :discard :member-type :length :vector :dimensions :matrix :operator :aget :selector :class :increment :postfix :decrement :pre-increment :prefix :pre-decrement :not :+- :infix :* :div :+ :- :< :> :<= :>= :== :!= :and :or :xor :conditional-choice :set :set+ :set- :set* :set-div :constructor :name :input :output :parameter :T :vec3 :vec4 :vec2 :radians :degrees :sin :angle :cos :tan :asin :x :acos :atan :y :y_over_x :power :exp :log :exp2 :log2 :sqrt :inversesqrt :abs :sign :floor :ceil :fract :mod :max :clamp :minVal :maxVal :step :edge :smoothstep :edge0 :edge1 :distance :p0 :p1 :dot :cross :normalize :faceforward :N :I :Nref :reflect :refract :eta :texture2DLod :sampler2D :sampler :coord :lod :texture2DProjLod :textureCubeLod :texture2D :bias :texture2DProj :textureCube :samplerCube :mat :mat3 :mat2 :mat4 :matrixCompMult :bvec :ivec4 :ivec2 :ivec3 :bvec3 :bvec2 :bvec4 :lessThan :lessThanEqual :greaterThan :greaterThanEqual :equal :notEqual :any :all], :seen #{:y :bvec :maxVal :ceil :coord :infix :edge :highp :attribute :atan :selector :<= :* :sign :I :cos :greaterThan :increment :textureCubeLod :tan :pre-decrement :bvec3 :int :lowp :if-else :> :continue :if :sqrt :mat3 :default :sampler :vec3 :float :mod :name :ivec4 :- :edge0 :lessThanEqual :value :or :precision :exp :notEqual :set-div :edge1 :mat2 :pre-increment :not :type :T :output :texture2DProjLod :log2 :ivec2 :p1 :texture2D :vector :angle :all :vec4 :postfix :dimensions :asin :p0 :>= :textureCube :prefix :member-type :term :matrix :div :vec2 :bvec2 :head :conditional-choice :break :power :set+ :set- :const :xor :refract :texture2DLod :exp2 :mediump :out :Nref :smoothstep :+ :abs :varying :max :invariant :!= :== :uniform :id :class :inversesqrt :samplerCube :constructor :literal :length :mat4 :sin :operator :and :texture2DProj :discard :storage :faceforward :bvec4 :greaterThanEqual :x :mat :lod :tag :bool :decrement :input :dot :equal :distance :y_over_x :set :set* :fract :bias :aget :body :+- :clamp :radians :degrees :acos :sampler2D :step :N :log :normalize :matrixCompMult :< :ivec3 :floor :parameter :cross :reflect :inout :eta :any :in :lessThan :minVal}}, :doc nil}