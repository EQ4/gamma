;; Analyzed by ClojureScript 0.0-3208
{:use-macros nil, :excludes #{}, :name fipp.printer, :imports nil, :requires {t transduce.reducers, transduce.reducers transduce.reducers, fv clojure.core.rrb-vector, clojure.core.rrb-vector clojure.core.rrb-vector, r clojure.core.reducers, clojure.core.reducers clojure.core.reducers, clojure.string clojure.string, s clojure.string}, :uses nil, :defs {update-right {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(deque f args)], :arglists [[deque f & args]], :arglists-meta (nil)}, :arglists (quote ([deque f & args])), :end-column 19, :end-line 107, :column 7, :line 107, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :name fipp.printer/update-right, :variadic true, :file "resources/public/js/out/fipp/printer.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(deque f args)], :arglists [[deque f & args]], :arglists-meta (nil)}, :method-params [(deque f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists [[deque f & args]], :test true}, annotate-rights {:meta {:end-column 21, :end-line 84, :column 6, :line 84, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :file "resources/public/js/out/fipp/printer.cljs", :line 84, :column 1, :end-line 84, :end-column 21, :test true, :name fipp.printer/annotate-rights}, format-nodes {:protocol-inline nil, :meta {:arglists (quote ([coll])), :end-column 19, :end-line 163, :column 7, :line 163, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :name fipp.printer/format-nodes, :variadic false, :file "resources/public/js/out/fipp/printer.cljs", :end-column 19, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :test true}, *options* {:meta {:dynamic true, :end-column 25, :end-line 105, :column 16, :line 105, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :file "resources/public/js/out/fipp/printer.cljs", :line 105, :column 1, :end-line 105, :end-column 25, :dynamic true, :test true, :name fipp.printer/*options*}, serialize {:protocol-inline nil, :meta {:arglists (quote ([doc])), :end-column 16, :end-line 25, :column 7, :line 25, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :name fipp.printer/serialize, :variadic false, :file "resources/public/js/out/fipp/printer.cljs", :end-column 16, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc])), :test true}, annotate-begins {:meta {:end-column 21, :end-line 110, :column 6, :line 110, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :file "resources/public/js/out/fipp/printer.cljs", :line 110, :column 1, :end-line 110, :end-column 21, :test true, :name fipp.printer/annotate-begins}, conjl {:protocol-inline nil, :meta {:end-column 11, :end-line 14, :column 6, :line 14, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :name fipp.printer/conjl, :variadic false, :file "resources/public/js/out/fipp/printer.cljs", :end-column 11, :method-params ([deque x]), :protocol-impl nil, :arglists-meta (), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists nil, :test true}, conjr {:meta {:end-column 11, :end-line 15, :column 6, :line 15, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :file "resources/public/js/out/fipp/printer.cljs", :line 15, :column 1, :end-line 15, :end-column 11, :test true, :name fipp.printer/conjr}, conjlr {:protocol-inline nil, :meta {:arglists (quote ([l deque r])), :end-column 13, :end-line 17, :column 7, :line 17, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :name fipp.printer/conjlr, :variadic false, :file "resources/public/js/out/fipp/printer.cljs", :end-column 13, :method-params ([l deque r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([l deque r])), :test true}, pprint-document {:protocol-inline nil, :meta {:arglists (quote ([document options])), :end-column 22, :end-line 224, :column 7, :line 224, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :name fipp.printer/pprint-document, :variadic false, :file "resources/public/js/out/fipp/printer.cljs", :end-column 22, :method-params ([document options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 2, :fn-var true, :arglists (quote ([document options])), :test true}, throw-op {:protocol-inline nil, :meta {:arglists (quote ([node])), :end-column 15, :end-line 81, :column 7, :line 81, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :name fipp.printer/throw-op, :variadic false, :file "resources/public/js/out/fipp/printer.cljs", :end-column 15, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :test true}, serialize-node {:meta {:end-column 25, :end-line 23, :column 11, :line 23, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :file "resources/public/js/out/fipp/printer.cljs", :line 23, :column 1, :end-line 23, :end-column 25, :test true, :name fipp.printer/serialize-node}, empty-deque {:meta {:end-column 17, :end-line 12, :column 6, :line 12, :file "/Users/kovasb/repo/gamma/resources/public/js/out/fipp/printer.cljs"}, :file "resources/public/js/out/fipp/printer.cljs", :line 12, :column 1, :end-line 12, :end-column 17, :test true, :name fipp.printer/empty-deque}}, :require-macros nil, :cljs.analyzer/constants {:order [:hierarchy :default :op :text :else :pass :escaped :span :line :inline :break :group :begin :end :nest :offset :outdent :align :right :width :buffers :position :nodes :too-far :column :tab-stops :length :fits], :seen #{:nest :align :outdent :tab-stops :group :else :offset :default :too-far :width :op :column :fits :begin :break :nodes :line :buffers :length :right :escaped :position :pass :end :hierarchy :inline :text :span}}, :doc "See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing"}