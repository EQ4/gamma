<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1415838364195">{:repl-history {:ide [], :local [&quot;(def s\n    (let [gl-pos (g/gl-position)\n         a-pos (g/attribute \&quot;a_Position\&quot; (g/vector-type 4))\n         point-size (g/gl-point-size)]\n     {:tag          :program\n      :declarations [a-pos]\n      :main\n                    (g/block\n                      (g/set gl-pos a-pos)\n                      (g/set point-size 10.0))}))&quot; &quot;(print (emit s))&quot; &quot;(g/+ 1 2)&quot; &quot;(emit (g/+ 1 2))&quot; &quot;(emit (g/+ 1 (g/max 1 2)))&quot; &quot;s&quot; &quot;(group-by first [[1 2] [1 2] [3 4]])&quot; &quot;(use 'gamma.emit)&quot; &quot;(use 'gamma.emit.emit)&quot; &quot;(emit-dispatch 1)&quot; &quot;(operator-class (term :+ []))&quot; &quot;(gamma.ast/operators (term :+ []))&quot; &quot;gamma.ast/operators&quot; &quot;(defn function? [x]\n  (gamma.ast/functions (head x)))&quot; &quot;(defn operator-class [x]\n  (if-let [o (gamma.ast/operators (head x))]\n    (:class o)))&quot; &quot;(emit-dispatch (term :+ []))&quot; &quot;(emit-dispatch {:tag :program})&quot; &quot;(emit-dispatch :float)&quot; &quot;(use 'gamma.emit.function)&quot; &quot;(in-ns 'gamma.emit.function)&quot; &quot;(emit (term :max [1 2]))&quot; &quot;(in-ns 'gamma.emit.emit)&quot; &quot;(emit-dispatch (term :max []))&quot; &quot;(emit-dispatch (term :max [1 2]))&quot; &quot;(body (term :max [1 2]))&quot; &quot;(defmethod emit :function [x]\n  (apply\n    str\n    (flatten [(name (head x))\n              \&quot;(\&quot;\n              (interpose \&quot;, \&quot; (map emit (body x)))\n              \&quot;)\&quot;])))&quot; &quot;(emit (term :max 1 2))&quot; &quot;(use 'gamma.emit.operator)&quot; &quot;(in-ns 'gamma.emit.operator)&quot; &quot;(keys gamma.ast/operators)&quot; &quot;(emit a)&quot; &quot;(emit (term :selector a :xx))&quot; &quot;(emit (term :&lt;= a b))&quot; &quot;(emit (term :* a b))&quot; &quot;(emit (term :increment a))&quot; &quot;(emit (term :pre-decrement a))&quot; &quot;(emit (term :&gt; a b))&quot; &quot;(emit (term :- a b))&quot; &quot;(emit (term :or a b))&quot; &quot;(emit (term :set-div a b))&quot; &quot;(emit (term :pre-increment a))&quot; &quot;(emit (term :not a))&quot; &quot;(emit (term :&gt;= a b))&quot; &quot;(emit (term :div a b))&quot; &quot;(emit (term :set+ a b))&quot; &quot;(emit (term :set- a b))&quot; &quot;(emit (term :xor a b))&quot; &quot;(emit (term :+ a b))&quot; &quot;(emit (term :!= a b))&quot; &quot;(emit (term :== a b))&quot; &quot;(emit (term :and a b))&quot; &quot;(emit (term :decrement a b))&quot; &quot;(emit (term :set a b))&quot; &quot;(emit (term :set* a b))&quot; &quot;(emit (term :aget a b))&quot; &quot;(emit (term :+- a b))&quot; &quot;(emit (term :&lt; a b))&quot; &quot;(emit (term :constructor {:tag :vector :length 2} a))&quot; &quot;(emit (term :constructor {:tag :vector :length 2 :member-type :float} a))&quot; &quot;(use 'gamma.emit.statement)&quot; &quot;(in-ns 'gamma.emit.statement)&quot; &quot;(use 'gamma.emit.tag)&quot; &quot;(def a {:tag :variable :name \&quot;a\&quot;})&quot; &quot;(def b {:tag :variable :name \&quot;b\&quot;})&quot; &quot;(use 'gamma.api)&quot; &quot;(emit (term :block (variable \&quot;a\&quot;) (variable \&quot;b\&quot;)))&quot; &quot;(emit\n    (term :for\n          (variable \&quot;a\&quot;)\n          (variable \&quot;b\&quot;)\n          (variable \&quot;c\&quot;)\n          (term :block (variable \&quot;d\&quot;) (variable \&quot;e\&quot;))))&quot; &quot;(emit (term :if (variable \&quot;a\&quot;)\n                  (term :block (variable \&quot;b\&quot;) (variable \&quot;c\&quot;))))&quot; &quot;(emit (term :if-else (variable \&quot;a\&quot;)\n                  (term :block (variable \&quot;b\&quot;) (variable \&quot;c\&quot;))\n                  (term :block (variable \&quot;d\&quot;) (variable \&quot;e\&quot;))))&quot; &quot;(print \n    (emit (term :if-else (variable \&quot;a\&quot;)\n               (term :block (variable \&quot;b\&quot;) (variable \&quot;c\&quot;))\n               (term :block (variable \&quot;d\&quot;) (variable \&quot;e\&quot;)))))&quot; &quot;(use 'gamma.emit.emit\n       'gamma.emit.function\n       'gamma.emit.operator\n       'gamma.emit.statement \n       'gamma.emit.tag)&quot; &quot;(use '[gamma.api :as g])&quot; &quot;(use 'gamma.emit.emit\n       'gamma.emit.function\n       'gamma.emit.operator\n       'gamma.emit.statement\n       'gamma.emit.tag)&quot;], :remote []}}</component>
</project>

